{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","id","checked","title","onClick","ul","listStyle","margin","TodoList","props","todos","map","onToggle","AddTodo","onCreate","defaultValue","useState","value","setValue","bind","event","target","clear","useInputValue","onSubmit","preventDefault","trim","App","setTodos","now","Date","getDate","month","getMonth","Provider","filter","concat","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be5ecdcb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {useContext} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from '../context.js'\r\n\r\nconst styles = {\r\n    li: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        padding: '.5rem 1rem',\r\n        border: 'solid 1px grey',\r\n        borderRadius: '4px',\r\n        marginBottom: '.5rem'\r\n    },\r\n    input: {\r\n        marginRight: '1rem'\r\n    }\r\n}\r\n\r\nfunction TodoItem({ todo, index, onChange }) {\r\n    const { removeTodo } = useContext(Context)\r\n    const classes = []\r\n    if (todo.completed) {\r\n        classes.push('done')\r\n    }\r\n    return(\r\n        <li style={styles.li}>\r\n            <span className={classes.join(' ')}>\r\n                <input \r\n                style={styles.input} \r\n                type=\"checkbox\" \r\n                onChange={() => onChange(todo.id)}\r\n                checked={todo.completed}\r\n                />\r\n            <strong>{index + 1}</strong>\r\n            &nbsp;\r\n            { todo.title }\r\n            </span>\r\n        <button className=\"rm\" onClick={() => removeTodo(todo.id)}>&times;</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object, \r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func\r\n}\r\n\r\nexport default TodoItem","import React from 'react'\r\nimport TodoItem from './TodoItem.js'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst styles = {\r\n    ul: {\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\n\r\nfunction TodoList(props) {\r\n    return (\r\n        <ul style={styles.ul}>\r\n            {props.todos.map((todo, index) => {\r\n                return <TodoItem todo={todo} key={todo.id} index={index} onChange={props.onToggle}/>\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired\r\n}\r\nexport default TodoList","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction useInputValue(defaultValue = '') {\r\n    const [value, setValue] = useState(defaultValue)\r\n\r\n    return {\r\n        bind: {\r\n        value, \r\n        onChange: event => setValue(event.target.value)\r\n        },\r\n        clear: () => setValue(''),\r\n        value: () => value\r\n    }\r\n}\r\n\r\n\r\nfunction AddTodo({onCreate}) {\r\n    const input = useInputValue('')\r\n\r\n    const [value, setValue] = useState('')\r\n\r\n    function submitHandler(event) {\r\n        event.preventDefault()\r\n        if (input.value().trim()) {\r\n            onCreate(input.value())\r\n            input.clear()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form style={{marginBottom: '1rem'}} onSubmit={submitHandler}>\r\n            <input {...input.bind}>\r\n\r\n            </input>\r\n            <button className=\"add\" type=\"submit\">\r\n                Add task\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    onCreate: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo","import React, {useEffect} from 'react'\nimport TodoList from './Todo/TodoList.js'\nimport Context from './context.js'\nimport AddTodo from './Todo/AddTodo.js'\n\nfunction App() {\n  const [todos, setTodos] = React.useState([])\n\n\n  function toggleTodo(id) {\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo\n    }))\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function addTodo(title) {\n    setTodos(todos.concat([{\n      title: title,\n      id: Date.now(),\n      completed: false\n    }]))\n  }\n\n  const now = new Date().getDate();\n  const month = new Date().getMonth();\n\n  return (\n    <Context.Provider value={{removeTodo}}>\n    <div className=\"wrapper\">\n      <h1>{now}.{month + 1}</h1>\n      <AddTodo onCreate={addTodo} />\n      { todos.length ? <TodoList todos={todos} onToggle={toggleTodo}/> : <p>No todos!</p>}  \n    </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}